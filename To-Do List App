import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import sqlite3 as sql

def add_task():
    task_string = task_field.get().strip()  # Remove leading/trailing whitespace
    if len(task_string) == 0:
        messagebox.showinfo('Error', 'Task field is empty.')
    else:
        tasks.append((task_string, 0))  # 0 means task is active
        the_cursor.execute('insert into tasks (title, completed) values (?, ?)', (task_string, 0))
        list_update()
        task_field.delete(0, 'end')

def list_update():
    clear_list()
    for task, completed in tasks:
        if completed:
            task_listbox.insert('end', f"{task} \u2714")  # \u2714 is checkmark symbol
        else:
            task_listbox.insert('end', task)

def toggle_completion(event):
    try:
        selected_index = task_listbox.curselection()[0]
        task, completed = tasks[selected_index]
        tasks[selected_index] = (task, 1 - completed)  # Toggle completed status
        the_cursor.execute('update tasks set completed = ? where title = ?', (1 - completed, task))
        list_update()
    except IndexError:
        messagebox.showinfo('Error', 'No Task Selected.')

def edit_selected_task():
    try:
        selected_index = task_listbox.curselection()[0]
        task, completed = tasks[selected_index]
        new_task_name = simpledialog.askstring("Edit Task", "Enter new task name:", initialvalue=task)
        if new_task_name:
            tasks[selected_index] = (new_task_name, completed)
            the_cursor.execute('update tasks set title = ? where title = ?', (new_task_name, task))
            list_update()
    except IndexError:
        messagebox.showinfo('Error', 'No Task Selected.')

def delete_task():
    try:
        selected_index = task_listbox.curselection()[0]
        task, completed = tasks[selected_index]
        tasks.pop(selected_index)
        the_cursor.execute('delete from tasks where title = ?', (task,))
        list_update()
    except IndexError:
        messagebox.showinfo('Error', 'No Task Selected.')

def delete_all_tasks():
    message_box = messagebox.askyesno('Delete All', 'Are you sure you want to delete all tasks?')
    if message_box:
        tasks.clear()
        the_cursor.execute('delete from tasks')
        list_update()

def clear_list():
    task_listbox.delete(0, 'end')

def close():
    the_connection.commit()  # Commit any pending transactions
    the_connection.close()   # Close the connection
    guiWindow.destroy()

def retrieve_database():
    tasks.clear()
    for row in the_cursor.execute('select title, completed from tasks'):
        tasks.append((row[0], row[1]))
    list_update()

def add_completed_column():
    try:
        the_cursor.execute('alter table tasks add column completed integer default 0')
    except sql.OperationalError as e:
        if 'duplicate column name' in str(e):
            pass  # Column already exists
        else:
            raise

if __name__ == "__main__":
    guiWindow = tk.Tk()
    guiWindow.title("To-Do List App - By NISHANT")
    guiWindow.geometry("900x450+750+250")
    guiWindow.resizable(0, 0)
    guiWindow.configure(bg="#F0F0F0")  # Light gray background

    the_connection = sql.connect('listOfTasks.db')
    the_cursor = the_connection.cursor()
    the_cursor.execute('create table if not exists tasks (title text, completed integer default 0)')
    add_completed_column()

    tasks = []

    header_frame = tk.Frame(guiWindow, bg="#3E606F")  # Dark teal background
    functions_frame = tk.Frame(guiWindow, bg="#3E606F")  # Dark teal background
    listbox_frame = tk.Frame(guiWindow, bg="#4B8F8C")  # Teal background

    header_frame.pack(fill="x", padx=10, pady=10)
    functions_frame.pack(side="left", fill="y", padx=10, pady=10, expand=True)
    listbox_frame.pack(side="right", fill="both", padx=10, pady=10, expand=True)

    header_label = ttk.Label(
        header_frame,
        text="To-Do List",
        font=("Arial", 30, "bold"),
        background="#3E606F",  # Dark teal background
        foreground="#FFFFFF"  # White text color
    )
    header_label.pack(padx=10, pady=10)

    task_label = ttk.Label(
        functions_frame,
        text="Enter the Tasks you wanna add to your routine:",
        font=("Arial", 12,"bold"),
        background="#3E606F",  # Dark teal background
        foreground="#FFFFFF"  # White text color
    )
    task_label.grid(row=0, column=0, padx=20, pady=10, sticky="w")

    task_field = ttk.Entry(
        functions_frame,
        font=("Arial", 12),
        width=30,
        background="#FFFFFF",  # White background
        foreground="#000000"  # Black text color
    )
    task_field.grid(row=1, column=0, padx=20, pady=10)

    add_button = ttk.Button(
        functions_frame,
        text="Add Task",
        width=30,
        command=add_task,
        style="TButton"
    )
    add_button.grid(row=2, column=0, padx=20, pady=10)

    edit_button = ttk.Button(
        functions_frame,
        text="Edit Task",
        width=30,
        command=edit_selected_task,
        style="TButton"
    )
    edit_button.grid(row=3, column=0, padx=20, pady=10)

    del_button = ttk.Button(
        functions_frame,
        text="Delete Task",
        width=30,
        command=delete_task,
        style="TButton"
    )
    del_button.grid(row=4, column=0, padx=20, pady=10)

    del_all_button = ttk.Button(
        functions_frame,
        text="Delete All Tasks",
        width=30,
        command=delete_all_tasks,
        style="TButton"
    )
    del_all_button.grid(row=5, column=0, padx=20, pady=10)

    exit_button = ttk.Button(
        functions_frame,
        text="Exit",
        width=30,
        command=close,
        style="TButton"
    )
    exit_button.grid(row=6, column=0, padx=20, pady=10)

    task_listbox = tk.Listbox(
        listbox_frame,
        width=40,
        height=15,
        selectmode='SINGLE',
        background="#FFFFFF",  # White background
        foreground="#000000",  # Black text color
        selectbackground="#4B8F8C",  # Teal select background
        selectforeground="red",  # select color on tasks
        font=("Arial", 18)
    )
    task_listbox.pack(padx=10, pady=10, fill="both", expand=True)

    # Bind double-click event to edit task
    task_listbox.bind('<Double-1>', lambda event: edit_selected_task())

    # Ensure selection is set when clicking on a task
    task_listbox.bind('<ButtonRelease-1>', lambda event: task_listbox.selection_set(task_listbox.nearest(event.y)))

    retrieve_database()
    list_update()
    guiWindow.mainloop()

    the_connection.commit()
    the_cursor.close()
